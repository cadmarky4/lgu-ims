version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lgu-postgres
    environment:
      POSTGRES_DB: lgu_management_db
      POSTGRES_USER: lgu_user
      POSTGRES_PASSWORD: lgu_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - lgu-network
    restart: unless-stopped

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: lgu-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lgu-network
    restart: unless-stopped

  # Backend API (for production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lgu-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://lgu_user:lgu_password@postgres:5432/lgu_management_db?schema=public
      JWT_SECRET: your-production-jwt-secret
      JWT_REFRESH_SECRET: your-production-refresh-secret
      REDIS_URL: redis://redis:6379
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - lgu-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: lgu-adminer
    ports:
      - "8080:8080"
    networks:
      - lgu-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  lgu-network:
    driver: bridge
